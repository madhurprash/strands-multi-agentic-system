
[2025-05-21T20:32:27.402938] Python REPL Error:
Code:
import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Fetch Apple's financial data
aapl = yf.Ticker("AAPL")

# Get income statement
income_stmt = aapl.income_stmt
print("Income Statement (Last 4 Years):")
print(income_stmt)

# Get balance sheet
balance_sheet = aapl.balance_sheet
print("\nBalance Sheet (Last 4 Years):")
print(balance_sheet)

# Get cash flow
cash_flow = aapl.cashflow
print("\nCash Flow Statement (Last 4 Years):")
print(cash_flow)
Error:
Traceback (most recent call last):
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/python_repl.py", line 469, in python_repl
    user_input = get_user_input(
                 ^^^^^^^^^^^^^^^
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/utils/user_input.py", line 62, in get_user_input
    result = loop.run_until_complete(get_user_input_async(prompt, default))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 629, in run_until_complete
    self._check_running()
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 588, in _check_running
    raise RuntimeError('This event loop is already running')
RuntimeError: This event loop is already running


[2025-05-21T20:36:03.555066] Python REPL Error:
Code:
import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Download Apple's financial data
aapl = yf.Ticker("AAPL")

# Get income statement
income_stmt = aapl.income_stmt
# Get balance sheet
balance_sheet = aapl.balance_sheet
# Get cash flow statement
cash_flow = aapl.cashflow

print("Data retrieved successfully!")
print("\nIncome Statement periods:")
print(income_stmt.columns)

print("\nBalance Sheet periods:")
print(balance_sheet.columns)

print("\nCash Flow periods:")
print(cash_flow.columns)

# Display recent income statement
print("\n--- Recent Annual Income Statement ---")
print(income_stmt.iloc[:10, :4])
Error:
Traceback (most recent call last):
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/python_repl.py", line 469, in python_repl
    user_input = get_user_input(
                 ^^^^^^^^^^^^^^^
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/utils/user_input.py", line 62, in get_user_input
    result = loop.run_until_complete(get_user_input_async(prompt, default))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 629, in run_until_complete
    self._check_running()
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 588, in _check_running
    raise RuntimeError('This event loop is already running')
RuntimeError: This event loop is already running


[2025-05-21T20:38:54.509314] Python REPL Error:
Code:
import pandas as pd
import yfinance as yf
import datetime

# Get Apple stock data
ticker = "AAPL"
apple = yf.Ticker(ticker)

# Get financial statements
income_stmt = apple.income_stmt
balance_sheet = apple.balance_sheet
cash_flow = apple.cashflow

# Display income statement
print("INCOME STATEMENT")
print(income_stmt)
print("\n")

# Display balance sheet
print("BALANCE SHEET")
print(balance_sheet)
print("\n")

# Display cash flow statement
print("CASH FLOW STATEMENT")
print(cash_flow)
Error:
Traceback (most recent call last):
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/python_repl.py", line 469, in python_repl
    user_input = get_user_input(
                 ^^^^^^^^^^^^^^^
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/utils/user_input.py", line 62, in get_user_input
    result = loop.run_until_complete(get_user_input_async(prompt, default))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 629, in run_until_complete
    self._check_running()
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 588, in _check_running
    raise RuntimeError('This event loop is already running')
RuntimeError: This event loop is already running


[2025-05-21T20:41:34.832951] Python REPL Error:
Code:
# Let's organize the data for easier access
import pandas as pd
from datetime import datetime
import numpy as np

# Function to format large numbers
def format_number(num, precision=2):
    if abs(num) >= 1e9:
        return f"${num/1e9:.{precision}f}B"
    elif abs(num) >= 1e6:
        return f"${num/1e6:.{precision}f}M"
    else:
        return f"${num:.{precision}f}"

# Extract years from the data
income_statements = {
    "2020": {"year": "2020", "date": "2020-09-26"},
    "2021": {"year": "2021", "date": "2021-09-25"},
    "2022": {"year": "2022", "date": "2022-09-24"},
    "2023": {"year": "2023", "date": "2023-09-30"},
    "2024": {"year": "2024", "date": "2024-09-28"}
}

balance_sheets = {
    "2020": {"year": "2020", "date": "2020-09-26"},
    "2021": {"year": "2021", "date": "2021-09-25"},
    "2022": {"year": "2022", "date": "2022-09-24"},
    "2023": {"year": "2023", "date": "2023-09-30"},
    "2024": {"year": "2024", "date": "2024-09-28"}
}

cash_flows = {
    "2020": {"year": "2020", "date": "2020-09-26"},
    "2021": {"year": "2021", "date": "2021-09-25"},
    "2022": {"year": "2022", "date": "2022-09-24"},
    "2023": {"year": "2023", "date": "2023-09-30"},
    "2024": {"year": "2024", "date": "2024-09-28"}
}

# Extracting all the important metrics
years = ["2020", "2021", "2022", "2023", "2024"]
metrics = {
    "Revenue": [],
    "Gross Profit": [],
    "Operating Income": [],
    "Net Income": [],
    "EPS": [],
    "Total Assets": [],
    "Current Assets": [],
    "Cash & Equivalents": [],
    "Inventory": [],
    "Current Investments": [],
    "Total Liabilities": [],
    "Current Liabilities": [],
    "Current Debt": [],
    "Total Debt": [],
    "Shareholders' Equity": [],
    "Operating Cash Flow": [],
    "Capital Expenditure": [],
    "Free Cash Flow": [],
    "Dividends Paid": []
}

# Fill in the data
for year in years:
    for statement in income_statements.values():
        if statement["date"].startswith(year):
            income_statements[year] = statement
    
    for statement in balance_sheets.values():
        if statement["date"].startswith(year):
            balance_sheets[year] = statement
    
    for statement in cash_flows.values():
        if statement["date"].startswith(year):
            cash_flows[year] = statement

# Now calculate the key ratios for each year
profitability_ratios = {
    "Gross Margin (%)": [],
    "Operating Margin (%)": [],
    "Net Profit Margin (%)": [],
    "Return on Equity (ROE) (%)": [],
    "Return on Assets (ROA) (%)": []
}

liquidity_ratios = {
    "Current Ratio": [],
    "Quick Ratio": []
}

leverage_ratios = {
    "Debt to Equity": [],
    "Interest Coverage": []
}

efficiency_ratios = {
    "Asset Turnover": [],
    "Days Sales Outstanding (DSO)": []
}

print("Processing data and calculating ratios...")
Error:
Traceback (most recent call last):
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/python_repl.py", line 469, in python_repl
    user_input = get_user_input(
                 ^^^^^^^^^^^^^^^
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/utils/user_input.py", line 62, in get_user_input
    result = loop.run_until_complete(get_user_input_async(prompt, default))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 629, in run_until_complete
    self._check_running()
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 588, in _check_running
    raise RuntimeError('This event loop is already running')
RuntimeError: This event loop is already running


[2025-05-21T20:44:18.564337] Python REPL Error:
Code:
import pandas as pd
import numpy as np

# Create DataFrames for the financial statements
income_data = {
    'Year': ['2024', '2023', '2022', '2021', '2020'],
    'Revenue': [391035000000, 383285000000, 394328000000, 365817000000, 274515000000],
    'Cost_of_Revenue': [210352000000, 214137000000, 223546000000, 212981000000, 169559000000],
    'Gross_Profit': [180683000000, 169148000000, 170782000000, 152836000000, 104956000000],
    'Operating_Income': [123216000000, 114301000000, 119437000000, 108949000000, 66288000000],
    'Net_Income': [93736000000, 96995000000, 99803000000, 94680000000, 57411000000],
    'EPS': [6.11, 6.16, 6.15, 5.67, 3.31]
}

balance_data = {
    'Year': ['2024', '2023', '2022', '2021', '2020'],
    'Total_Assets': [364980000000, 352583000000, 352755000000, 351002000000, 323888000000],
    'Current_Assets': [152987000000, 143566000000, 135405000000, 134836000000, 143713000000],
    'Cash_Equivalents': [29943000000, 29965000000, 23646000000, 34940000000, 38016000000],
    'Inventory': [7286000000, 6331000000, 4946000000, 6580000000, 4061000000],
    'Current_Investments': [35228000000, 31590000000, 24658000000, 27699000000, 52927000000],
    'Receivables': [66243000000, 60985000000, 60932000000, 51506000000, 37445000000],
    'Current_Liabilities': [176392000000, 145308000000, 153982000000, 125481000000, 105392000000],
    'Total_Liabilities': [308030000000, 290437000000, 302083000000, 287912000000, 258549000000],
    'Current_Debt': [20879000000, 15807000000, 21110000000, 15613000000, 13769000000],
    'Total_Debt': [106629000000, 111088000000, 120069000000, 124719000000, 112436000000],
    'Shareholders_Equity': [56950000000, 62146000000, 50672000000, 63090000000, 65339000000]
}

cashflow_data = {
    'Year': ['2024', '2023', '2022', '2021', '2020'],
    'Net_Cash_Operations': [118254000000, 110543000000, 122151000000, 104038000000, 80674000000],
    'Capital_Expenditure': [-9447000000, -10959000000, -10708000000, -11085000000, -7309000000],
    'Free_Cash_Flow': [108807000000, 99584000000, 111443000000, 92953000000, 73365000000]
}

# Convert to DataFrames
income_df = pd.DataFrame(income_data)
balance_df = pd.DataFrame(balance_data)
cashflow_df = pd.DataFrame(cashflow_data)

# Print basic info to check data
print("Data loaded for analysis.\n")
print("Income Statement Overview (in millions):")
print(income_df[['Year', 'Revenue', 'Net_Income']].head())
Error:
Traceback (most recent call last):
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/python_repl.py", line 469, in python_repl
    user_input = get_user_input(
                 ^^^^^^^^^^^^^^^
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/utils/user_input.py", line 62, in get_user_input
    result = loop.run_until_complete(get_user_input_async(prompt, default))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 629, in run_until_complete
    self._check_running()
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 588, in _check_running
    raise RuntimeError('This event loop is already running')
RuntimeError: This event loop is already running


[2025-05-22T16:55:02.034687] Python REPL Error:
Code:
import pandas as pd
import numpy as np

# Extract the latest data
income_data = pd.DataFrame(
    [
        {
            "year": 2024,
            "revenue": 391035000000.0,
            "gross_profit": 180683000000.0,
            "operating_income": 123216000000.0,
            "net_income": 93736000000.0,
            "interest_expense": 0.0  # Appears to be missing in the data
        },
        {
            "year": 2023,
            "revenue": 383285000000.0,
            "gross_profit": 169148000000.0,
            "operating_income": 114301000000.0,
            "net_income": 96995000000.0,
            "interest_expense": 0.0  # Appears to be missing in the data
        },
        {
            "year": 2022,
            "revenue": 394328000000.0,
            "gross_profit": 170782000000.0,
            "operating_income": 119437000000.0,
            "net_income": 99803000000.0,
            "interest_expense": 0.0  # Appears to be missing in the data
        },
        {
            "year": 2021,
            "revenue": 365817000000.0,
            "gross_profit": 152836000000.0,
            "operating_income": 108949000000.0,
            "net_income": 94680000000.0,
            "interest_expense": 2645000000.0
        },
        {
            "year": 2020,
            "revenue": 274515000000.0,
            "gross_profit": 104956000000.0,
            "operating_income": 66288000000.0,
            "net_income": 57411000000.0,
            "interest_expense": 2873000000.0
        }
    ]
)

balance_data = pd.DataFrame(
    [
        {
            "year": 2024,
            "total_assets": 364980000000.0,
            "current_assets": 152987000000.0,
            "inventory": 7286000000.0,
            "total_liabilities": 308030000000.0,
            "current_liabilities": 176392000000.0,
            "shareholders_equity": 56950000000.0,
            "total_debt": 106629000000.0
        },
        {
            "year": 2023,
            "total_assets": 352583000000.0,
            "current_assets": 143566000000.0,
            "inventory": 6331000000.0,
            "total_liabilities": 290437000000.0,
            "current_liabilities": 145308000000.0,
            "shareholders_equity": 62146000000.0,
            "total_debt": 111088000000.0
        },
        {
            "year": 2022,
            "total_assets": 352755000000.0,
            "current_assets": 135405000000.0,
            "inventory": 4946000000.0,
            "total_liabilities": 302083000000.0,
            "current_liabilities": 153982000000.0,
            "shareholders_equity": 50672000000.0,
            "total_debt": 120069000000.0
        },
        {
            "year": 2021,
            "total_assets": 351002000000.0,
            "current_assets": 134836000000.0,
            "inventory": 6580000000.0,
            "total_liabilities": 287912000000.0,
            "current_liabilities": 125481000000.0,
            "shareholders_equity": 63090000000.0,
            "total_debt": 124719000000.0
        },
        {
            "year": 2020,
            "total_assets": 323888000000.0,
            "current_assets": 143713000000.0,
            "inventory": 4061000000.0,
            "total_liabilities": 258549000000.0,
            "current_liabilities": 105392000000.0,
            "shareholders_equity": 65339000000.0,
            "total_debt": 112436000000.0
        }
    ]
)

cash_flow_data = pd.DataFrame(
    [
        {
            "year": 2024,
            "net_cash_flow_from_operations": 118254000000.0,
            "capital_expenditure": -9447000000.0,
            "free_cash_flow": 108807000000.0
        },
        {
            "year": 2023,
            "net_cash_flow_from_operations": 110543000000.0,
            "capital_expenditure": -10959000000.0,
            "free_cash_flow": 99584000000.0
        },
        {
            "year": 2022,
            "net_cash_flow_from_operations": 122151000000.0,
            "capital_expenditure": -10708000000.0,
            "free_cash_flow": 111443000000.0
        },
        {
            "year": 2021,
            "net_cash_flow_from_operations": 104038000000.0,
            "capital_expenditure": -11085000000.0,
            "free_cash_flow": 92953000000.0
        },
        {
            "year": 2020,
            "net_cash_flow_from_operations": 80674000000.0,
            "capital_expenditure": -7309000000.0,
            "free_cash_flow": 73365000000.0
        }
    ]
)

# Merge data for calculations
financial_data = balance_data.merge(income_data, on="year")
financial_data = financial_data.merge(cash_flow_data, on="year")

# Calculate ratios
ratios = pd.DataFrame()
ratios["year"] = financial_data["year"]

# Profitability ratios
ratios["gross_margin"] = financial_data["gross_profit"] / financial_data["revenue"] * 100
ratios["net_margin"] = financial_data["net_income"] / financial_data["revenue"] * 100
ratios["ROA"] = financial_data["net_income"] / financial_data["total_assets"] * 100
ratios["ROE"] = financial_data["net_income"] / financial_data["shareholders_equity"] * 100

# Liquidity ratios
ratios["current_ratio"] = financial_data["current_assets"] / financial_data["current_liabilities"]
ratios["quick_ratio"] = (financial_data["current_assets"] - financial_data["inventory"]) / financial_data["current_liabilities"]

# Leverage ratios
ratios["debt_to_equity"] = financial_data["total_debt"] / financial_data["shareholders_equity"]
# For interest coverage, handle division by zero
ratios["interest_coverage"] = np.where(
    financial_data["interest_expense"] == 0, 
    float('inf'),  # Set to infinity when interest expense is zero
    financial_data["operating_income"] / financial_data["interest_expense"]
)

# Efficiency ratios
ratios["asset_turnover"] = financial_data["revenue"] / financial_data["total_assets"]

# Calculate average assets for beginning and end of year
# For simplicity, we'll use current year's total assets
ratios["inventory_turnover"] = financial_data["revenue"] / financial_data["inventory"]

# FCF to Revenue ratio
ratios["fcf_to_revenue"] = financial_data["free_cash_flow"] / financial_data["revenue"] * 100

# Sort by year in descending order
ratios = ratios.sort_values("year", ascending=False).reset_index(drop=True)

# Format ratios for display
pd.set_option('display.float_format', '{:.2f}'.format)
ratios
Error:
Traceback (most recent call last):
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/python_repl.py", line 469, in python_repl
    user_input = get_user_input(
                 ^^^^^^^^^^^^^^^
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/utils/user_input.py", line 62, in get_user_input
    result = loop.run_until_complete(get_user_input_async(prompt, default))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 629, in run_until_complete
    self._check_running()
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 588, in _check_running
    raise RuntimeError('This event loop is already running')
RuntimeError: This event loop is already running


[2025-05-22T16:58:50.471615] Python REPL Error:
Code:
# Get the latest financial data
income_statements = [
    {'fiscal_year': '2024', 'revenue': 391035000000.0, 'net_income': 93736000000.0, 'gross_profit': 180683000000.0, 'operating_income': 123216000000.0},
    {'fiscal_year': '2023', 'revenue': 383285000000.0, 'net_income': 96995000000.0, 'gross_profit': 169148000000.0, 'operating_income': 114301000000.0},
    {'fiscal_year': '2022', 'revenue': 394328000000.0, 'net_income': 99803000000.0, 'gross_profit': 170782000000.0, 'operating_income': 119437000000.0},
    {'fiscal_year': '2021', 'revenue': 365817000000.0, 'net_income': 94680000000.0, 'gross_profit': 152836000000.0, 'operating_income': 108949000000.0},
    {'fiscal_year': '2020', 'revenue': 274515000000.0, 'net_income': 57411000000.0, 'gross_profit': 104956000000.0, 'operating_income': 66288000000.0}
]

balance_sheets = [
    {'fiscal_year': '2024', 'total_assets': 364980000000.0, 'current_assets': 152987000000.0, 'inventory': 7286000000.0, 'current_liabilities': 176392000000.0, 'shareholders_equity': 56950000000.0, 'total_liabilities': 308030000000.0, 'total_debt': 106629000000.0},
    {'fiscal_year': '2023', 'total_assets': 352583000000.0, 'current_assets': 143566000000.0, 'inventory': 6331000000.0, 'current_liabilities': 145308000000.0, 'shareholders_equity': 62146000000.0, 'total_liabilities': 290437000000.0, 'total_debt': 111088000000.0},
    {'fiscal_year': '2022', 'total_assets': 352755000000.0, 'current_assets': 135405000000.0, 'inventory': 4946000000.0, 'current_liabilities': 153982000000.0, 'shareholders_equity': 50672000000.0, 'total_liabilities': 302083000000.0, 'total_debt': 120069000000.0},
    {'fiscal_year': '2021', 'total_assets': 351002000000.0, 'current_assets': 134836000000.0, 'inventory': 6580000000.0, 'current_liabilities': 125481000000.0, 'shareholders_equity': 63090000000.0, 'total_liabilities': 287912000000.0, 'total_debt': 124719000000.0},
    {'fiscal_year': '2020', 'total_assets': 323888000000.0, 'current_assets': 143713000000.0, 'inventory': 4061000000.0, 'current_liabilities': 105392000000.0, 'shareholders_equity': 65339000000.0, 'total_liabilities': 258549000000.0, 'total_debt': 112436000000.0}
]

cash_flow_statements = [
    {'fiscal_year': '2024', 'net_cash_flow_from_operations': 118254000000.0, 'capital_expenditure': -9447000000.0, 'free_cash_flow': 108807000000.0},
    {'fiscal_year': '2023', 'net_cash_flow_from_operations': 110543000000.0, 'capital_expenditure': -10959000000.0, 'free_cash_flow': 99584000000.0},
    {'fiscal_year': '2022', 'net_cash_flow_from_operations': 122151000000.0, 'capital_expenditure': -10708000000.0, 'free_cash_flow': 111443000000.0},
    {'fiscal_year': '2021', 'net_cash_flow_from_operations': 104038000000.0, 'capital_expenditure': -11085000000.0, 'free_cash_flow': 92953000000.0},
    {'fiscal_year': '2020', 'net_cash_flow_from_operations': 80674000000.0, 'capital_expenditure': -7309000000.0, 'free_cash_flow': 73365000000.0}
]

# Calculate key financial ratios
def calculate_ratios(income_statements, balance_sheets, cash_flow_statements):
    results = {}
    
    # Get the most recent year's data
    income = income_statements[0]
    balance = balance_sheets[0]
    cash_flow = cash_flow_statements[0]
    
    # Profitability Ratios
    results['ROE'] = income['net_income'] / balance['shareholders_equity']
    results['ROA'] = income['net_income'] / balance['total_assets']
    results['Gross_Margin'] = income['gross_profit'] / income['revenue']
    results['Net_Margin'] = income['net_income'] / income['revenue']
    results['Operating_Margin'] = income['operating_income'] / income['revenue']
    
    # Liquidity Ratios
    results['Current_Ratio'] = balance['current_assets'] / balance['current_liabilities']
    results['Quick_Ratio'] = (balance['current_assets'] - balance['inventory']) / balance['current_liabilities']
    
    # Leverage Ratios
    results['Debt_to_Equity'] = balance['total_debt'] / balance['shareholders_equity']
    results['Debt_to_Assets'] = balance['total_debt'] / balance['total_assets']
    
    # Efficiency Ratios
    results['Asset_Turnover'] = income['revenue'] / balance['total_assets']
    
    # Cash Flow Ratios
    results['FCF_to_Revenue'] = cash_flow['free_cash_flow'] / income['revenue']
    results['FCF_to_Net_Income'] = cash_flow['free_cash_flow'] / income['net_income']
    
    return results

# Calculate and show results
ratios = calculate_ratios(income_statements, balance_sheets, cash_flow_statements)

# Format results as percentages where appropriate
formatted_ratios = {
    'ROE': f"{ratios['ROE']*100:.2f}%",
    'ROA': f"{ratios['ROA']*100:.2f}%",
    'Gross Margin': f"{ratios['Gross_Margin']*100:.2f}%",
    'Net Margin': f"{ratios['Net_Margin']*100:.2f}%",
    'Operating Margin': f"{ratios['Operating_Margin']*100:.2f}%",
    'Current Ratio': f"{ratios['Current_Ratio']:.2f}",
    'Quick Ratio': f"{ratios['Quick_Ratio']:.2f}",
    'Debt to Equity': f"{ratios['Debt_to_Equity']:.2f}",
    'Debt to Assets': f"{ratios['Debt_to_Assets']:.2f}",
    'Asset Turnover': f"{ratios['Asset_Turnover']:.2f}",
    'FCF to Revenue': f"{ratios['FCF_to_Revenue']*100:.2f}%",
    'FCF to Net Income': f"{ratios['FCF_to_Net_Income']*100:.2f}%",
}

print("AAPL Financial Ratios (FY 2024):")
for key, value in formatted_ratios.items():
    print(f"{key}: {value}")
Error:
Traceback (most recent call last):
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/python_repl.py", line 469, in python_repl
    user_input = get_user_input(
                 ^^^^^^^^^^^^^^^
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/utils/user_input.py", line 62, in get_user_input
    result = loop.run_until_complete(get_user_input_async(prompt, default))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 629, in run_until_complete
    self._check_running()
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 588, in _check_running
    raise RuntimeError('This event loop is already running')
RuntimeError: This event loop is already running


[2025-05-22T16:59:33.100573] Python REPL Error:
Code:
# Get the latest financial data
income_statements = [
    {'fiscal_year': '2024', 'revenue': 391035000000.0, 'net_income': 93736000000.0, 'gross_profit': 180683000000.0, 'operating_income': 123216000000.0},
    {'fiscal_year': '2023', 'revenue': 383285000000.0, 'net_income': 96995000000.0, 'gross_profit': 169148000000.0, 'operating_income': 114301000000.0},
    {'fiscal_year': '2022', 'revenue': 394328000000.0, 'net_income': 99803000000.0, 'gross_profit': 170782000000.0, 'operating_income': 119437000000.0},
    {'fiscal_year': '2021', 'revenue': 365817000000.0, 'net_income': 94680000000.0, 'gross_profit': 152836000000.0, 'operating_income': 108949000000.0},
    {'fiscal_year': '2020', 'revenue': 274515000000.0, 'net_income': 57411000000.0, 'gross_profit': 104956000000.0, 'operating_income': 66288000000.0}
]

balance_sheets = [
    {'fiscal_year': '2024', 'total_assets': 364980000000.0, 'current_assets': 152987000000.0, 'inventory': 7286000000.0, 'current_liabilities': 176392000000.0, 'shareholders_equity': 56950000000.0, 'total_liabilities': 308030000000.0, 'total_debt': 106629000000.0},
    {'fiscal_year': '2023', 'total_assets': 352583000000.0, 'current_assets': 143566000000.0, 'inventory': 6331000000.0, 'current_liabilities': 145308000000.0, 'shareholders_equity': 62146000000.0, 'total_liabilities': 290437000000.0, 'total_debt': 111088000000.0},
    {'fiscal_year': '2022', 'total_assets': 352755000000.0, 'current_assets': 135405000000.0, 'inventory': 4946000000.0, 'current_liabilities': 153982000000.0, 'shareholders_equity': 50672000000.0, 'total_liabilities': 302083000000.0, 'total_debt': 120069000000.0},
    {'fiscal_year': '2021', 'total_assets': 351002000000.0, 'current_assets': 134836000000.0, 'inventory': 6580000000.0, 'current_liabilities': 125481000000.0, 'shareholders_equity': 63090000000.0, 'total_liabilities': 287912000000.0, 'total_debt': 124719000000.0},
    {'fiscal_year': '2020', 'total_assets': 323888000000.0, 'current_assets': 143713000000.0, 'inventory': 4061000000.0, 'current_liabilities': 105392000000.0, 'shareholders_equity': 65339000000.0, 'total_liabilities': 258549000000.0, 'total_debt': 112436000000.0}
]

cash_flow_statements = [
    {'fiscal_year': '2024', 'net_cash_flow_from_operations': 118254000000.0, 'capital_expenditure': -9447000000.0, 'free_cash_flow': 108807000000.0},
    {'fiscal_year': '2023', 'net_cash_flow_from_operations': 110543000000.0, 'capital_expenditure': -10959000000.0, 'free_cash_flow': 99584000000.0},
    {'fiscal_year': '2022', 'net_cash_flow_from_operations': 122151000000.0, 'capital_expenditure': -10708000000.0, 'free_cash_flow': 111443000000.0},
    {'fiscal_year': '2021', 'net_cash_flow_from_operations': 104038000000.0, 'capital_expenditure': -11085000000.0, 'free_cash_flow': 92953000000.0},
    {'fiscal_year': '2020', 'net_cash_flow_from_operations': 80674000000.0, 'capital_expenditure': -7309000000.0, 'free_cash_flow': 73365000000.0}
]

# Calculate key financial ratios
def calculate_ratios(income_statements, balance_sheets, cash_flow_statements):
    results = {}
    
    # Get the most recent year's data
    income = income_statements[0]
    balance = balance_sheets[0]
    cash_flow = cash_flow_statements[0]
    
    # Profitability Ratios
    results['ROE'] = income['net_income'] / balance['shareholders_equity']
    results['ROA'] = income['net_income'] / balance['total_assets']
    results['Gross_Margin'] = income['gross_profit'] / income['revenue']
    results['Net_Margin'] = income['net_income'] / income['revenue']
    results['Operating_Margin'] = income['operating_income'] / income['revenue']
    
    # Liquidity Ratios
    results['Current_Ratio'] = balance['current_assets'] / balance['current_liabilities']
    results['Quick_Ratio'] = (balance['current_assets'] - balance['inventory']) / balance['current_liabilities']
    
    # Leverage Ratios
    results['Debt_to_Equity'] = balance['total_debt'] / balance['shareholders_equity']
    results['Debt_to_Assets'] = balance['total_debt'] / balance['total_assets']
    
    # Efficiency Ratios
    results['Asset_Turnover'] = income['revenue'] / balance['total_assets']
    
    # Cash Flow Ratios
    results['FCF_to_Revenue'] = cash_flow['free_cash_flow'] / income['revenue']
    results['FCF_to_Net_Income'] = cash_flow['free_cash_flow'] / income['net_income']
    
    return results

# Calculate and show results
ratios = calculate_ratios(income_statements, balance_sheets, cash_flow_statements)

# Format results as percentages where appropriate
formatted_ratios = {
    'ROE': f"{ratios['ROE']*100:.2f}%",
    'ROA': f"{ratios['ROA']*100:.2f}%",
    'Gross Margin': f"{ratios['Gross_Margin']*100:.2f}%",
    'Net Margin': f"{ratios['Net_Margin']*100:.2f}%",
    'Operating Margin': f"{ratios['Operating_Margin']*100:.2f}%",
    'Current Ratio': f"{ratios['Current_Ratio']:.2f}",
    'Quick Ratio': f"{ratios['Quick_Ratio']:.2f}",
    'Debt to Equity': f"{ratios['Debt_to_Equity']:.2f}",
    'Debt to Assets': f"{ratios['Debt_to_Assets']:.2f}",
    'Asset Turnover': f"{ratios['Asset_Turnover']:.2f}",
    'FCF to Revenue': f"{ratios['FCF_to_Revenue']*100:.2f}%",
    'FCF to Net Income': f"{ratios['FCF_to_Net_Income']*100:.2f}%",
}

for key, value in formatted_ratios.items():
    print(f"{key}: {value}")

# Calculate 5-year trends
print("\n5-Year Trends (2020-2024):")

# Revenue growth
revenue_growth = (income_statements[0]['revenue'] / income_statements[4]['revenue']) ** (1/5) - 1
print(f"5-Year Revenue CAGR: {revenue_growth*100:.2f}%")

# Net income growth
net_income_growth = (income_statements[0]['net_income'] / income_statements[4]['net_income']) ** (1/5) - 1
print(f"5-Year Net Income CAGR: {net_income_growth*100:.2f}%")

# Free Cash Flow growth
fcf_growth = (cash_flow_statements[0]['free_cash_flow'] / cash_flow_statements[4]['free_cash_flow']) ** (1/5) - 1
print(f"5-Year Free Cash Flow CAGR: {fcf_growth*100:.2f}%")

# Year-over-year revenue growth
yoy_revenue_growth = (income_statements[0]['revenue'] / income_statements[1]['revenue']) - 1
print(f"YoY Revenue Growth (2023-2024): {yoy_revenue_growth*100:.2f}%")

# Year-over-year net income growth
yoy_net_income_growth = (income_statements[0]['net_income'] / income_statements[1]['net_income']) - 1
print(f"YoY Net Income Growth (2023-2024): {yoy_net_income_growth*100:.2f}%")
Error:
Traceback (most recent call last):
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/python_repl.py", line 469, in python_repl
    user_input = get_user_input(
                 ^^^^^^^^^^^^^^^
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/utils/user_input.py", line 62, in get_user_input
    result = loop.run_until_complete(get_user_input_async(prompt, default))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 629, in run_until_complete
    self._check_running()
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 588, in _check_running
    raise RuntimeError('This event loop is already running')
RuntimeError: This event loop is already running


[2025-05-22T17:00:04.187107] Python REPL Error:
Code:
# AAPL Financial Ratio Analysis (FY 2024)

# Most recent year data (2024)
revenue = 391035000000.0
net_income = 93736000000.0
gross_profit = 180683000000.0
operating_income = 123216000000.0

total_assets = 364980000000.0
current_assets = 152987000000.0
inventory = 7286000000.0
current_liabilities = 176392000000.0
shareholders_equity = 56950000000.0
total_debt = 106629000000.0

cash_flow_operations = 118254000000.0
free_cash_flow = 108807000000.0

# Calculate key ratios
# Profitability Ratios
roe = net_income / shareholders_equity
roa = net_income / total_assets
gross_margin = gross_profit / revenue
net_margin = net_income / revenue
operating_margin = operating_income / revenue

# Liquidity Ratios
current_ratio = current_assets / current_liabilities
quick_ratio = (current_assets - inventory) / current_liabilities

# Leverage Ratios
debt_to_equity = total_debt / shareholders_equity
debt_to_assets = total_debt / total_assets

# Efficiency Ratios
asset_turnover = revenue / total_assets

# Cash Flow Ratios
fcf_to_revenue = free_cash_flow / revenue
fcf_to_net_income = free_cash_flow / net_income

print("AAPL Financial Ratios (FY 2024):")
print(f"ROE: {roe*100:.2f}%")
print(f"ROA: {roa*100:.2f}%")
print(f"Gross Margin: {gross_margin*100:.2f}%")
print(f"Net Margin: {net_margin*100:.2f}%")
print(f"Operating Margin: {operating_margin*100:.2f}%")
print(f"Current Ratio: {current_ratio:.2f}")
print(f"Quick Ratio: {quick_ratio:.2f}")
print(f"Debt to Equity: {debt_to_equity:.2f}")
print(f"Debt to Assets: {debt_to_assets:.2f}")
print(f"Asset Turnover: {asset_turnover:.2f}")
print(f"FCF to Revenue: {fcf_to_revenue*100:.2f}%")
print(f"FCF to Net Income: {fcf_to_net_income*100:.2f}%")

# 5-year trend data (2020 vs 2024)
revenue_2020 = 274515000000.0
net_income_2020 = 57411000000.0
free_cash_flow_2020 = 73365000000.0

# Calculate 5-year growth rates (CAGR)
revenue_cagr = (revenue / revenue_2020) ** (1/5) - 1
net_income_cagr = (net_income / net_income_2020) ** (1/5) - 1
fcf_cagr = (free_cash_flow / free_cash_flow_2020) ** (1/5) - 1

print("\n5-Year Growth Trends (2020-2024):")
print(f"5-Year Revenue CAGR: {revenue_cagr*100:.2f}%")
print(f"5-Year Net Income CAGR: {net_income_cagr*100:.2f}%")
print(f"5-Year Free Cash Flow CAGR: {fcf_cagr*100:.2f}%")

# Year-over-year changes (2023 vs 2024)
revenue_2023 = 383285000000.0
net_income_2023 = 96995000000.0

yoy_revenue_growth = (revenue / revenue_2023) - 1
yoy_net_income_growth = (net_income / net_income_2023) - 1

print("\nYear-over-Year Changes (2023-2024):")
print(f"YoY Revenue Growth: {yoy_revenue_growth*100:.2f}%")
print(f"YoY Net Income Growth: {yoy_net_income_growth*100:.2f}%")
Error:
Traceback (most recent call last):
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/python_repl.py", line 469, in python_repl
    user_input = get_user_input(
                 ^^^^^^^^^^^^^^^
  File "/Users/madhurpt/Library/Application Support/pypoetry/venv/lib/python3.11/site-packages/strands_tools/utils/user_input.py", line 62, in get_user_input
    result = loop.run_until_complete(get_user_input_async(prompt, default))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 629, in run_until_complete
    self._check_running()
  File "/opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 588, in _check_running
    raise RuntimeError('This event loop is already running')
RuntimeError: This event loop is already running

